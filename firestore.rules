rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Block everything by default
    match /{document=**} {
      allow read, write: if false;
    }

    // collective mood (public read, auth write)
    match /appState/{docId} {
      allow read:  if true;
      allow write: if request.auth != null;
    }

    // snapshots (public read, auth create)
    match /moodSnapshots/{snapshotId} {
      allow read:   if true;
      allow create: if request.auth != null;
    }

    // per-user activity (auth-only, own-doc)
    match /userActivity/{userId} {
      allow read, write:
        if request.auth != null
        && request.auth.uid == userId;
    }

    // per-user mood history (auth-only, own-subcollection)
    match /userMoodHistory/{userId}/{docId} {
      allow read, write:
        if request.auth != null
        && request.auth.uid == userId;
    }

    // community thoughts
    match /communityQuotes/{quoteId} {
      // anyone can read
      allow read: if true;

      // create only if:
      //  • authenticated
      //  • text is a non-empty string <1000 chars
      //  • likes start at 0
      //  • submittedAt == now
      allow create: if request.auth != null
        && request.resource.data.text       is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() < 1000
        && request.resource.data.likes      == 0
        && request.resource.data.submittedAt == request.time;

      // update only if:
      //  • only the `likes` field is being modified
      //  • likes value is a number >= 0
      allow update: if request.resource.data.keys().hasAll(resource.data.keys())
        && resource.data.keys().hasAll(request.resource.data.keys())
        && request.resource.data.text == resource.data.text
        && request.resource.data.submittedAt == resource.data.submittedAt
        && request.resource.data.likes is int
        && request.resource.data.likes >= 0;
    }
  }
}
