rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Utility Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Collection Rules ---

    // appState/collectiveMood: The core state of the application.
    // This is updated via a transaction in the mood-service.
    match /appState/collectiveMood {
      // Everyone can read the current collective mood.
      allow read: if true;

      // Only authenticated users can write, and only by incrementing contributions by 1.
      // This rule works in tandem with the client-side transaction logic.
      allow write: if isSignedIn()
                  // Data validation for the transaction
                  && request.resource.data.h is number
                  && request.resource.data.s is number
                  && request.resource.data.l is number
                  && request.resource.data.moodAdjective is string
                  && request.resource.data.totalContributions == resource.data.totalContributions + 1
                  && request.resource.data.lastMoods is list
                  && request.resource.data.lastMoods.size() <= 20
                  && request.resource.data.lastUpdated == request.time;
    }

    // userActivity/{sessionId}: Tracks when a user was last active for heartbeat.
    match /userActivity/{sessionId} {
      // Allow read for potential future features (e.g., "X users online").
      allow read: if true;

      // Only the authenticated user can update their own activity document.
      // This is a "heartbeat" to show the user is active.
      allow write: if isSignedIn() 
                   && isOwner(sessionId)
                   // Enforce the schema and server timestamp for updates.
                   && request.resource.data.keys().hasOnly(['sessionId', 'lastActive'])
                   && request.resource.data.lastActive == request.time;
    }

    // moodSnapshots/{snapshotId}: Read-only historical data archives.
    match /moodSnapshots/{snapshotId} {
      // Everyone can read the mood history.
      allow read: if true;
      
      // No one can write, update, or delete snapshots from the client.
      // This must be handled by a trusted server/admin environment to prevent tampering.
      allow write: if false; 
    }

    // communityQuotes/{quoteId}: User-submitted thoughts.
    match /communityQuotes/{quoteId} {
      // Everyone can read approved quotes.
      allow read: if true;

      // Authenticated users can create new quotes.
      allow create: if isSignedIn()
                    // Validate the incoming data schema: only text and a timestamp are allowed.
                    // This prevents users from adding other fields like 'status'.
                    && request.resource.data.keys().hasOnly(['text', 'submittedAt'])
                    // Validate text content.
                    && request.resource.data.text is string
                    && request.resource.data.text.size() > 0 && request.resource.data.text.size() <= 150
                    // Ensure the timestamp is from the server.
                    && request.resource.data.submittedAt == request.time;
                    
      // Nobody can update or delete quotes from the client. This is critical for an unmoderated app.
      allow update, delete: if false;
    }
  }
}
